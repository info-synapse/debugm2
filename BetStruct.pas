/// it's a good practice to put all data definition into a stand-alone unit
// - this unit will be shared between client and server
unit BetStruct;

interface

uses
  mormot.core.base,
  mormot.orm.base,
  mormot.orm.core,
  mormot.rest.server;
type


  /// here we declare the class containing the data
  // - it just has to inherits from TSQLRecord, and the published
  // properties will be used for the ORM (and all SQL creation)
  // - the beginning of the class name must be 'TSQL' for proper table naming
  // in client/server environnment
  TSQLSampleRecord = class(TOrm)
  private
    fQuestion: RawUTF8;
    fName: RawUTF8;
    fTime: TModTime;
    fVersion: TRecordVersion;
  published
    property Time: TModTime read fTime write fTime;
    property Name: RawUTF8 read fName write fName;
    property Question: RawUTF8 read fQuestion write fQuestion;
    property Version: TRecordVersion read fVersion write fVersion;
  end;

  TEventTypesRecord = class(TOrm)
  private
    fevtType_Id: Integer;
    fevtType_Name: RawUTF8;
    fTime: TModTime;
  published
    property Time: TModTime read fTime write fTime;
    property evtType_Name: RawUTF8 read fevtType_Name write fevtType_Name;
    property evtType_Id: Integer read fevtType_Id write fevtType_Id;
  end;

 
type
  /// DRAW Table
  // - type definition auto-generated by SynDBExplorer 1.18.1735 at 2015-08-09 15:36:46
  // from DRAW
  // - note that the ORM will add one missing ID field via:
  // $ ALTER TABLE DRAW ADD ID INTEGER NOT NULL PRIMARY KEY
  TDRAW = class(TSQLRecord)
  protected

    fDRAW_START: TDateTime;
    fDRAW_END: TDateTime;
    fCLM_PRC_EU: Real;
    fCLM_PRC_LOCAL: Real;
    fHS_TIMEOUT: Int64;
    fDRAW_ID: Int64;
    fISACTIVE: Int64;
    fISPUBLIC: Int64;
    fISTEST: Int64;
    fDRAW_DESCR: RawUTF8;
    fTime: TModTime;
  published

    /// match DRAW.DRAW_START [350 8 8 0] *
    property DRAW_START: TDateTime  read fDRAW_START write fDRAW_START;
    /// match DRAW.DRAW_END [350 8 8 0] *
    property DRAW_END: TDateTime   read fDRAW_END write fDRAW_END;
    /// match DRAW.CLM_PRC_EU [270 8 8 0] *
    property CLM_PRC_EU: Real   read fCLM_PRC_EU write fCLM_PRC_EU;
    /// match DRAW.CLM_PRC_LOCAL [270 8 8 0] *
    property CLM_PRC_LOCAL: Real   read fCLM_PRC_LOCAL write fCLM_PRC_LOCAL;
    /// match DRAW.HS_TIMEOUT [80 4 4 0] *
    property HS_TIMEOUT: Int64 read fHS_TIMEOUT write fHS_TIMEOUT;
    /// match DRAW.DRAW_ID [80 4 4 0] *
    property DRAW_ID: Int64 read fDRAW_ID write fDRAW_ID;
    /// match DRAW.ISACTIVE [70 2 2 0] *
    property ISACTIVE: Int64 read fISACTIVE write fISACTIVE;
    /// match DRAW.ISPUBLIC [70 2 2 0] *
    property ISPUBLIC: Int64 read fISPUBLIC write fISPUBLIC;
    /// match DRAW.ISTEST [70 2 2 0] *
    property ISTEST: Int64 read fISTEST write fISTEST;
    /// match DRAW.DRAW_DESCR [370 40 40 0] *
    property DRAW_DESCR: RawUTF8 index 40 read fDRAW_DESCR write fDRAW_DESCR;
    property Time: TModTime read fTime write fTime;
  end;

  TSQLBET_FORECASTS = class(TSQLRecord)
  protected
    // warning: aquery.ID [12676126] column matches TSQLRecord.ID
//    fID: Int64;
    fEVENT_ID: Int64;
    fGAME_ID: Int64;
    fFORECAST_CD: Int64;
    fDESCR: RawUTF8;
    fODDS: Double;
    fFC_STATUS: Int64;
    fFC_WIN: Int64;
    fREV_ID: Int64;
    fODDS_CHANGED: Int64;
    fISCURRENT: Int64;
    fFC_FROM: TDateTime;
    fFC_TO: TDateTime;
    fTEAM_ID: Int64;
    fFC_PLAYER_ID: Int64;
    fDESCR_EN: RawUTF8;
    fDESCR_LOCAL: RawUTF8;
    fFORDER: Int64;
    fFC_PARAM: Double;
    fFC_UID: Int64;
    fODDS_NORMAL: Double;
  public
    class procedure InitializeTable(const Server: IRestOrmServer; const FieldName: RawUTF8;
      Options: TOrmInitializeTableOptions); override;
  published
    /// note: ignoring aquery.ID matching TSQLRecord.ID
    /// match aquery.EVENT_ID [314243]
    property EVENT_ID: Int64 read fEVENT_ID write fEVENT_ID;
    /// match aquery.GAME_ID [1]
    property GAME_ID: Int64 read fGAME_ID write fGAME_ID;
    /// match aquery.FORECAST_CD [1]
    property FORECAST_CD: Int64 read fFORECAST_CD write fFORECAST_CD;
    /// match aquery.DESCR [1]
    property DESCR: RawUTF8 read fDESCR write fDESCR;
    /// match aquery.ODDS [1.16]
    property ODDS: Double read fODDS write fODDS;
    /// match aquery.FC_STATUS [1]
    property FC_STATUS: Int64 read fFC_STATUS write fFC_STATUS;
    /// match aquery.FC_WIN [0]
    property FC_WIN: Int64 read fFC_WIN write fFC_WIN;
    /// match aquery.REV_ID [0]
    property REV_ID: Int64 read fREV_ID write fREV_ID;
    /// match aquery.ODDS_CHANGED [0]
    property ODDS_CHANGED: Int64 read fODDS_CHANGED write fODDS_CHANGED;
    /// match aquery.ISCURRENT [1]
    property ISCURRENT: Int64 read fISCURRENT write fISCURRENT;
    /// match aquery.FC_FROM [2015-07-01T16:03:37]
    property FC_FROM: TDateTime read fFC_FROM write fFC_FROM;
    /// match aquery.FC_TO []
    property FC_TO: TDateTime read fFC_TO write fFC_TO;
    /// match aquery.TEAM_ID []
    property TEAM_ID: Int64 read fTEAM_ID write fTEAM_ID;
    /// match aquery.FC_PLAYER_ID []
    property FC_PLAYER_ID: Int64 read fFC_PLAYER_ID write fFC_PLAYER_ID;
    /// match aquery.DESCR_EN [1]
    property DESCR_EN: RawUTF8 read fDESCR_EN write fDESCR_EN;
    /// match aquery.DESCR_LOCAL [1]
    property DESCR_LOCAL: RawUTF8 read fDESCR_LOCAL write fDESCR_LOCAL;
    /// match aquery.FORDER [1]
    property FORDER: Int64 read fFORDER write fFORDER;
    /// match aquery.FC_PARAM [0]
    property FC_PARAM: Double read fFC_PARAM write fFC_PARAM;
    /// match aquery.FC_UID [4714]
    property FC_UID: Int64 read fFC_UID write fFC_UID;
    /// match aquery.ODDS_NORMAL []
    property ODDS_NORMAL: Double read fODDS_NORMAL write fODDS_NORMAL;
  end;

   TSQLBET_GAMES = class(TSQLRecord)
  protected
    // warning: aquery.ID [1] column matches TSQLRecord.ID
//    fID: Int64;
    fEVENT_ID: Int64;
    fGAME_ID: Int64;
    fSTATUS: Int64;
    fSTART_DATE: TDateTime;
    fEND_DATE: TDateTime;
    fEE: Int64;
    fGAME_DESCR: RawUTF8;
    fGAME_ORDER: Int64;
    fHANDICAP1: Double;
    fHANDICAP2: Double;
    fCHART_NAME: RawUTF8;
    fSPECIAL: Int64;
    fISLIVE: Int64;
    fCHART_DESCR: RawUTF8;
    fSC1: Int64;
    fSC2: Int64;
    fDISPLAY_FLAG: Int64;
  public
    class procedure InitializeTable(const Server: IRestOrmServer; const FieldName: RawUTF8;
      Options: TSQLInitializeTableOptions); override;
  published
    /// note: ignoring aquery.ID matching TSQLRecord.ID
    /// match aquery.EVENT_ID [1]
    property EVENT_ID: Int64 read fEVENT_ID write fEVENT_ID;
    /// match aquery.GAME_ID [1]
    property GAME_ID: Int64 read fGAME_ID write fGAME_ID;
    /// match aquery.STATUS [1]
    property STATUS: Int64 read fSTATUS write fSTATUS;
    /// match aquery.START_DATE [2012-01-01]
    property START_DATE: TDateTime read fSTART_DATE write fSTART_DATE;
    /// match aquery.END_DATE [2012-02-18T15:00:00]
    property END_DATE: TDateTime read fEND_DATE write fEND_DATE;
    /// match aquery.EE [1]
    property EE: Int64 read fEE write fEE;
    /// match aquery.GAME_DESCR [Final Result]
    property GAME_DESCR: RawUTF8 read fGAME_DESCR write fGAME_DESCR;
    /// match aquery.GAME_ORDER [1]
    property GAME_ORDER: Int64 read fGAME_ORDER write fGAME_ORDER;
    /// match aquery.HANDICAP1 []
    property HANDICAP1: Double read fHANDICAP1 write fHANDICAP1;
    /// match aquery.HANDICAP2 []
    property HANDICAP2: Double read fHANDICAP2 write fHANDICAP2;
    /// match aquery.CHART_NAME [1]
    property CHART_NAME: RawUTF8 read fCHART_NAME write fCHART_NAME;
    /// match aquery.SPECIAL [0]
    property SPECIAL: Int64 read fSPECIAL write fSPECIAL;
    /// match aquery.ISLIVE [0]
    property ISLIVE: Int64 read fISLIVE write fISLIVE;
    /// match aquery.CHART_DESCR []
    property CHART_DESCR: RawUTF8 read fCHART_DESCR write fCHART_DESCR;
    /// match aquery.SC1 []
    property SC1: Int64 read fSC1 write fSC1;
    /// match aquery.SC2 []
    property SC2: Int64 read fSC2 write fSC2;
    /// match aquery.DISPLAY_FLAG []
    property DISPLAY_FLAG: Int64 read fDISPLAY_FLAG write fDISPLAY_FLAG;
  end;

  TCurrentLiveEvents = class(TSQLRecord)
  protected
    fIMAGE_NAME: RawUTF8;
    fEVENT_ID: Int64;
    fEVENT_CODE: Int64;
    fEE: Int64;
    fEVENT_TYPE: Int64;
    fODDS_X: Double;
    fODDS_1: Double;
    fDISPLAY_DATE: TDateTime;
    fHANDICAP1: Double;
    fHANDICAP2: Double;
    fODDS_2: Double;
    fODDS_1ORX: Double;
    fODDS_1OR2: Double;
    fODDS_XOR2: Double;
    fSTATUS: Int64;
    fLIVE_STATUS: Int64;
    fLIVE_PERIOD: RawUTF8;
    fLIVE_ID: Int64;
    fEVT_COMMENT_UNC: RawUTF8;
    fLOCALDATE: TDateTime;
    fET_DESCR: RawUTF8;
    fET_CODE: RawUTF8;
    fET_DESCR_EN: RawUTF8;
    fET_FILENAME: RawUTF8;
    fTNAME: RawUTF8;
    fTORDER: Int64;
    fTWEB_ID: Int64;
    fTEAM1_NAME: RawUTF8;
    fTEAM2_NAME: RawUTF8;
    fFILE_NAME: RawUTF8;
    fISPLAYED: Int64;
    fLIVE_DT: TDateTime;
    fBRMATCHID: Int64;
    fLOTOS_CODE: Int64;
  published
    /// match aquery.IMAGE_NAME []
    property IMAGE_NAME: RawUTF8 read fIMAGE_NAME write fIMAGE_NAME;
    /// match aquery.EVENT_ID [362836]
    property EVENT_ID: Int64 read fEVENT_ID write fEVENT_ID;
    /// match aquery.EVENT_CODE [4283]
    property EVENT_CODE: Int64 read fEVENT_CODE write fEVENT_CODE;
    /// match aquery.EE [1]
    property EE: Int64 read fEE write fEE;
    /// match aquery.EVENT_TYPE [2]
    property EVENT_TYPE: Int64 read fEVENT_TYPE write fEVENT_TYPE;
    /// match aquery.ODDS_X [3.4]
    property ODDS_X: Double read fODDS_X write fODDS_X;
    /// match aquery.ODDS_1 [2.85]
    property ODDS_1: Double read fODDS_1 write fODDS_1;
    /// match aquery.DISPLAY_DATE [2015-08-13]
    property DISPLAY_DATE: TDateTime read fDISPLAY_DATE write fDISPLAY_DATE;
    /// match aquery.HANDICAP1 [0]
    property HANDICAP1: Double read fHANDICAP1 write fHANDICAP1;
    /// match aquery.HANDICAP2 [0]
    property HANDICAP2: Double read fHANDICAP2 write fHANDICAP2;
    /// match aquery.ODDS_2 [2.15]
    property ODDS_2: Double read fODDS_2 write fODDS_2;
    /// match aquery.ODDS_1ORX [1.55]
    property ODDS_1ORX: Double read fODDS_1ORX write fODDS_1ORX;
    /// match aquery.ODDS_1OR2 [1.23]
    property ODDS_1OR2: Double read fODDS_1OR2 write fODDS_1OR2;
    /// match aquery.ODDS_XOR2 [1.32]
    property ODDS_XOR2: Double read fODDS_XOR2 write fODDS_XOR2;
    /// match aquery.STATUS [6]
    property STATUS: Int64 read fSTATUS write fSTATUS;
    /// match aquery.LIVE_STATUS [-1]
    property LIVE_STATUS: Int64 read fLIVE_STATUS write fLIVE_STATUS;
    /// match aquery.LIVE_PERIOD []
    property LIVE_PERIOD: RawUTF8 read fLIVE_PERIOD write fLIVE_PERIOD;
    /// match aquery.LIVE_ID [916879]
    property LIVE_ID: Int64 read fLIVE_ID write fLIVE_ID;
    /// match aquery.EVT_COMMENT_UNC []
    property EVT_COMMENT_UNC: RawUTF8 read fEVT_COMMENT_UNC write fEVT_COMMENT_UNC;
    /// match aquery.LOCALDATE [2015-08-13T20:45:00]
    property LOCALDATE: TDateTime read fLOCALDATE write fLOCALDATE;
    /// match aquery.ET_DESCR [FOOTBALL]
    property ET_DESCR: RawUTF8 read fET_DESCR write fET_DESCR;
    /// match aquery.ET_CODE [FB]
    property ET_CODE: RawUTF8 read fET_CODE write fET_CODE;
    /// match aquery.ET_DESCR_EN [Football]
    property ET_DESCR_EN: RawUTF8 read fET_DESCR_EN write fET_DESCR_EN;
    /// match aquery.ET_FILENAME [~/App_Themes/" & sTheme & "/images/EventTypes/pilkanocna.png]
    property ET_FILENAME: RawUTF8 read fET_FILENAME write fET_FILENAME;
    /// match aquery.TNAME [England. League Cup]
    property TNAME: RawUTF8 read fTNAME write fTNAME;
    /// match aquery.TORDER [28]
    property TORDER: Int64 read fTORDER write fTORDER;
    /// match aquery.TWEB_ID []
    property TWEB_ID: Int64 read fTWEB_ID write fTWEB_ID;
    /// match aquery.TEAM1_NAME [Doncaster]
    property TEAM1_NAME: RawUTF8 read fTEAM1_NAME write fTEAM1_NAME;
    /// match aquery.TEAM2_NAME [Leeds]
    property TEAM2_NAME: RawUTF8 read fTEAM2_NAME write fTEAM2_NAME;
    /// match aquery.FILE_NAME [~/App_Themes/" & sTheme & "/images/Tournaments/angcup.png]
    property FILE_NAME: RawUTF8 read fFILE_NAME write fFILE_NAME;
    /// match aquery.ISPLAYED [0]
    property ISPLAYED: Int64 read fISPLAYED write fISPLAYED;
    /// match aquery.LIVE_DT [2015-05-05T20:45:00]
    property LIVE_DT: TDateTime read fLIVE_DT write fLIVE_DT;
    /// match aquery.BRMATCHID [7461456]
    property BRMATCHID: Int64 read fBRMATCHID write fBRMATCHID;
    /// match aquery.LOTOS_CODE [1]
    property LOTOS_CODE: Int64 read fLOTOS_CODE write fLOTOS_CODE;
  end;

  TSQLSchemalessData=class(TSQLRecord)
    protected
      fname:RawUTF8;
      fData:Variant;
    published
      property name:RawUTF8 read fName write fName;
      property Data:Variant read fData write fData;
  end;


 TSQLWSBET_EVENTS = class(TSQLRecord)
  protected
    // warning: aquery.ID [1] column matches TSQLRecord.ID
//    fID: Int64;
    fEVENT_ID: Int64;
    fCONTROL_ID: Int64;
    fINSTANCE_ID: Int64;
    fIMAGE_NAME: RawUTF8;
 public
    class procedure InitializeTable(const Server: IRestOrmServer; const FieldName: RawUTF8;
      Options: TSQLInitializeTableOptions); override;
  published
    /// note: ignoring aquery.ID matching TSQLRecord.ID
    /// match aquery.EVENT_ID [2002]
    property EVENT_ID: Int64 read fEVENT_ID write fEVENT_ID;
    /// match aquery.CONTROL_ID [2]
    property CONTROL_ID: Int64 read fCONTROL_ID write fCONTROL_ID;
    /// match aquery.INSTANCE_ID [1]
    property INSTANCE_ID: Int64 read fINSTANCE_ID write fINSTANCE_ID;
    /// match aquery.IMAGE_NAME [football_2.jpg]
    property IMAGE_NAME: RawUTF8 read fIMAGE_NAME write fIMAGE_NAME;
  end;


  TSQLBET_EVENTS = class(TSQLRecord)
  protected
    fEVENT_ID: Int64;
    fEVENT_CODE: Int64;
    fBET_START_DATE: TDateTime;
    fSCD_DATE: TDateTime;
    fACTUAL_DATE: TDateTime;
    fSTATUS: Int64;
    fEVENT_DESCR: RawUTF8;
    fTEAM1_ID: Int64;
    fTEAM2_ID: Int64;
    fDISPLAY_DATE: TDateTime;
    fDISPLAY_ORDER: Int64;
    fDRAW_ID: Int64;
    fTOURN_ID: Int64;
    fEVENT_TYPE: Int64;
    fCLDG_ID: Int64;
    fODDS_1: Double;
    fODDS_X: Double;
    fODDS_2: Double;
    fODDS_1ORX: Double;
    fODDS_1OR2: Double;
    fODDS_XOR2: Double;
    fHANDICAP1: Double;
    fHANDICAP2: Double;
    fPLAY_OFFSET: Double;
    fCANCEL_OFFSET: Double;
    fBIOS_CODE: Int64;
    fLOTOS_CODE: Int64;
    f_SCORE1: Int64;
    f_SCORE2: Int64;
    f_FSCORE1: Int64;
    f_FSCORE2: Int64;
    fLIVE_ID: Int64;
    fLIVE_STATUS: Int64;
    fLIVE_PERIOD: RawUTF8;
    fLIVE_SC1: Int64;
    fLIVE_SC2: Int64;
    fANTEPOST: Int64;
    fEE: Int64;
    fODDS_REVISION: Int64;
    fDATA_REVISION: Int64;
    fUSE_TRANSLATION: Int64;
    fLIVE_DATE: TDateTime;
    fUSE_CLM_LEN: Int64;
    fHAND_HT1: Double;
    fHAND_HT2: Double;
    fEVT_COMMENT: RawUTF8;
    fEVT_COMMENT_UNC: RawUTF8;
    fGAME_COUNT: Int64;
    //fdet_Bet_games:TSQLBET_GAMES;
    //fBetGamesData:Variant;
    //fBetForecastsData:Variant;
  private
    procedure loadBetGames(adet_bet_games:TSQLBET_GAMES);
    function getBetGames:TSQLBET_GAMES;
    procedure setBetGames(aBetGames:TSQLBET_GAMES);
    function getVDBetGames:Variant;
 public
    class procedure InitializeTable(const Server: IRestOrmServer; const FieldName: RawUTF8;
      Options: TSQLInitializeTableOptions); override;

  published
    /// match aquery.EVENT_ID [1]
    property EVENT_ID: Int64 read fEVENT_ID write fEVENT_ID;
    /// match aquery.EVENT_CODE [100]
    property EVENT_CODE: Int64 read fEVENT_CODE write fEVENT_CODE;
    /// match aquery.BET_START_DATE [2012-01-01]
    property BET_START_DATE: TDateTime read fBET_START_DATE write fBET_START_DATE;
    /// match aquery.SCD_DATE [2012-02-18T15:00:00]
    property SCD_DATE: TDateTime read fSCD_DATE write fSCD_DATE;
    /// match aquery.ACTUAL_DATE [2012-02-18T15:00:00]
    property ACTUAL_DATE: TDateTime read fACTUAL_DATE write fACTUAL_DATE;
    /// match aquery.STATUS [0]
    property STATUS: Int64 read fSTATUS write fSTATUS;
    /// match aquery.EVENT_DESCR [Nottingham Forest - Coventry City]
    property EVENT_DESCR: RawUTF8 read fEVENT_DESCR write fEVENT_DESCR;
    /// match aquery.TEAM1_ID [2685]
    property TEAM1_ID: Int64 read fTEAM1_ID write fTEAM1_ID;
    /// match aquery.TEAM2_ID [2492]
    property TEAM2_ID: Int64 read fTEAM2_ID write fTEAM2_ID;
    /// match aquery.DISPLAY_DATE [2012-02-18]
    property DISPLAY_DATE: TDateTime read fDISPLAY_DATE write fDISPLAY_DATE;
    /// match aquery.DISPLAY_ORDER [1091]
    property DISPLAY_ORDER: Int64 read fDISPLAY_ORDER write fDISPLAY_ORDER;
    /// match aquery.DRAW_ID [1]
    property DRAW_ID: Int64 read fDRAW_ID write fDRAW_ID;
    /// match aquery.TOURN_ID [271]
    property TOURN_ID: Int64 read fTOURN_ID write fTOURN_ID;
    /// match aquery.EVENT_TYPE [2]
    property EVENT_TYPE: Int64 read fEVENT_TYPE write fEVENT_TYPE;
    /// match aquery.CLDG_ID []
    property CLDG_ID: Int64 read fCLDG_ID write fCLDG_ID;
    /// match aquery.ODDS_1 [1.85]
    property ODDS_1: Double read fODDS_1 write fODDS_1;
    /// match aquery.ODDS_X [3.35]
    property ODDS_X: Double read fODDS_X write fODDS_X;
    /// match aquery.ODDS_2 [4.05]
    property ODDS_2: Double read fODDS_2 write fODDS_2;
    /// match aquery.ODDS_1ORX [1.18]
    property ODDS_1ORX: Double read fODDS_1ORX write fODDS_1ORX;
    /// match aquery.ODDS_1OR2 [1.23]
    property ODDS_1OR2: Double read fODDS_1OR2 write fODDS_1OR2;
    /// match aquery.ODDS_XOR2 [1.73]
    property ODDS_XOR2: Double read fODDS_XOR2 write fODDS_XOR2;
    /// match aquery.HANDICAP1 [0]
    property HANDICAP1: Double read fHANDICAP1 write fHANDICAP1;
    /// match aquery.HANDICAP2 [0]
    property HANDICAP2: Double read fHANDICAP2 write fHANDICAP2;
    /// match aquery.PLAY_OFFSET [10]
    property PLAY_OFFSET: Double read fPLAY_OFFSET write fPLAY_OFFSET;
    /// match aquery.CANCEL_OFFSET [5]
    property CANCEL_OFFSET: Double read fCANCEL_OFFSET write fCANCEL_OFFSET;
    /// match aquery.BIOS_CODE []
    property BIOS_CODE: Int64 read fBIOS_CODE write fBIOS_CODE;
    /// match aquery.LOTOS_CODE []
    property LOTOS_CODE: Int64 read fLOTOS_CODE write fLOTOS_CODE;
    /// match aquery.SCORE1 [0]
    property SCORE1: Int64 read f_SCORE1 write f_SCORE1;
    /// match aquery.SCORE2 [0]
    property SCORE2: Int64 read f_SCORE2 write f_SCORE2;
    /// match aquery.FSCORE1 [0]
    property FSCORE1: Int64 read f_FSCORE1 write f_FSCORE1;
    /// match aquery.FSCORE2 [0]
    property FSCORE2: Int64 read f_FSCORE2 write f_FSCORE2;
    /// match aquery.LIVE_ID [1]
    property LIVE_ID: Int64 read fLIVE_ID write fLIVE_ID;
    /// match aquery.LIVE_STATUS [-1]
    property LIVE_STATUS: Int64 read fLIVE_STATUS write fLIVE_STATUS;
    /// match aquery.LIVE_PERIOD []
    property LIVE_PERIOD: RawUTF8 read fLIVE_PERIOD write fLIVE_PERIOD;
    /// match aquery.LIVE_SC1 []
    property LIVE_SC1: Int64 read fLIVE_SC1 write fLIVE_SC1;
    /// match aquery.LIVE_SC2 []
    property LIVE_SC2: Int64 read fLIVE_SC2 write fLIVE_SC2;
    /// match aquery.ANTEPOST [0]
    property ANTEPOST: Int64 read fANTEPOST write fANTEPOST;
    /// match aquery.EE [1]
    property EE: Int64 read fEE write fEE;
    /// match aquery.ODDS_REVISION [0]
    property ODDS_REVISION: Int64 read fODDS_REVISION write fODDS_REVISION;
    /// match aquery.DATA_REVISION [0]
    property DATA_REVISION: Int64 read fDATA_REVISION write fDATA_REVISION;
    /// match aquery.USE_TRANSLATION [1]
    property USE_TRANSLATION: Int64 read fUSE_TRANSLATION write fUSE_TRANSLATION;
    /// match aquery.LIVE_DATE [2012-02-18T15:00:00]
    property LIVE_DATE: TDateTime read fLIVE_DATE write fLIVE_DATE;
    /// match aquery.USE_CLM_LEN [0]
    property USE_CLM_LEN: Int64 read fUSE_CLM_LEN write fUSE_CLM_LEN;
    /// match aquery.HAND_HT1 [0]
    property HAND_HT1: Double read fHAND_HT1 write fHAND_HT1;
    /// match aquery.HAND_HT2 [0]
    property HAND_HT2: Double read fHAND_HT2 write fHAND_HT2;
    /// match aquery.EVT_COMMENT []
    property EVT_COMMENT: RawUTF8 read fEVT_COMMENT write fEVT_COMMENT;
    /// match aquery.EVT_COMMENT_UNC []
    property EVT_COMMENT_UNC: RawUTF8 read fEVT_COMMENT_UNC write fEVT_COMMENT_UNC;
    /// match aquery.GAME_COUNT []
    property GAME_COUNT: Int64 read fGAME_COUNT write fGAME_COUNT;
  //  property det_bet_games:TSQLBET_GAMES read fdet_Bet_games{getBetGames}  write fdet_Bet_games{setBetGames};
//    property vd_bet_games:Variant read fBetGamesData {getVDBetGames} write fBetGamesData;
//    property vd_bet_fc:Variant read fBetForecastsData  {getVDBetGames} write fBetForecastsData ;
   public
     constructor  Create; override;
  end;



// aquery Table
  // - type definition auto-generated by SynDBExplorer 1.18.1735 at 2015-08-19 16:43:25
  // from aquery
  TSQLTEAMS_TRANSLATION = class(TSQLRecord)
  protected
    // warning: aquery.ID [1576] column matches TSQLRecord.ID
//    fID: Int64;
    fTEAM_ID: Int64;
    fTEAM_LANG: RawUTF8;
    fTEAM_NAME: RawUTF8;
    fTEAM_NAME_ABB: RawUTF8;
    fTEAM_NAME_LC: RawUTF8;
    fWEB_ID: Int64;
 public
    class procedure InitializeTable(const Server: IRestOrmServer; const FieldName: RawUTF8;
      Options: TSQLInitializeTableOptions); override;

  published
    /// note: ignoring aquery.ID matching TSQLRecord.ID
    /// match aquery.TEAM_ID [16185]
    property TEAM_ID: Int64 read fTEAM_ID write fTEAM_ID;
    /// match aquery.TEAM_LANG [CY]
    property TEAM_LANG: RawUTF8 read fTEAM_LANG write fTEAM_LANG;
    /// match aquery.TEAM_NAME [Peristeri]
    property TEAM_NAME: RawUTF8 read fTEAM_NAME write fTEAM_NAME;
    /// match aquery.TEAM_NAME_ABB []
    property TEAM_NAME_ABB: RawUTF8 read fTEAM_NAME_ABB write fTEAM_NAME_ABB;
    /// match aquery.TEAM_NAME_LC []
    property TEAM_NAME_LC: RawUTF8 read fTEAM_NAME_LC write fTEAM_NAME_LC;
    /// match aquery.WEB_ID []
    property WEB_ID: Int64 read fWEB_ID write fWEB_ID;
  end;

 TSQLTournaments_Translation = class(TSQLRecord)
  protected
    fTTID: Int64;
    fTID: Int64;
    fTLANG: RawUTF8;
    fTNAME: RawUTF8;
    fTWEB_ID: Int64;
    fTORDER: Int64;
    fFILE_NAME: RawUTF8;
    fTNAME_ABB: RawUTF8;
  public
    class procedure InitializeTable(const Server: IRestOrmServer; const FieldName: RawUTF8;
      Options: TSQLInitializeTableOptions); override;
  published
    /// match aquery.TTID [1]
    property TTID: Int64 read fTTID write fTTID;
    /// match aquery.TID [145]
    property TID: Int64 read fTID write fTID;
    /// match aquery.TLANG [CY]
    property TLANG: RawUTF8 read fTLANG write fTLANG;
    /// match aquery.TNAME [Champions League]
    property TNAME: RawUTF8 read fTNAME write fTNAME;
    /// match aquery.TWEB_ID [50]
    property TWEB_ID: Int64 read fTWEB_ID write fTWEB_ID;
    /// match aquery.TORDER [2]
    property TORDER: Int64 read fTORDER write fTORDER;
    /// match aquery.FILE_NAME [lm1.png]
    property FILE_NAME: RawUTF8 read fFILE_NAME write fFILE_NAME;
    /// match aquery.TNAME_ABB [Champions League]
    property TNAME_ABB: RawUTF8 read fTNAME_ABB write fTNAME_ABB;
  end;



  TSQLEVENT_TYPES = class(TSQLRecord)
  protected
    fET_ID: Int64;
    fET_DESCR: RawUTF8;
    fET_CODE: RawUTF8;
    fET_DESCR_EN: RawUTF8;
    fET_DESCR_LANG: RawUTF8;
    fET_DESCR_LOCAL: RawUTF8;
    fET_FILENAME: RawUTF8;
    fET_PERIODS: Int64;
    fET_FEED_SPORT_ID: Int64;
    fET_SPORT_ORDER: Int64;
  published
    /// match aquery.ET_ID [2]
    property ET_ID: Int64 read fET_ID write fET_ID;
    /// match aquery.ET_DESCR [FOOTBALL]
    property ET_DESCR: RawUTF8 read fET_DESCR write fET_DESCR;
    /// match aquery.ET_CODE [FB]
    property ET_CODE: RawUTF8 read fET_CODE write fET_CODE;
    /// match aquery.ET_DESCR_EN [Football]
    property ET_DESCR_EN: RawUTF8 read fET_DESCR_EN write fET_DESCR_EN;
    /// match aquery.ET_DESCR_LANG [RU]
    property ET_DESCR_LANG: RawUTF8 read fET_DESCR_LANG write fET_DESCR_LANG;
    /// match aquery.ET_DESCR_LOCAL [Football]
    property ET_DESCR_LOCAL: RawUTF8 read fET_DESCR_LOCAL write fET_DESCR_LOCAL;
    /// match aquery.ET_FILENAME [pilkanocna.png]
    property ET_FILENAME: RawUTF8 read fET_FILENAME write fET_FILENAME;
    /// match aquery.ET_PERIODS [2]
    property ET_PERIODS: Int64 read fET_PERIODS write fET_PERIODS;
    /// match aquery.ET_FEED_SPORT_ID [0]
    property ET_FEED_SPORT_ID: Int64 read fET_FEED_SPORT_ID write fET_FEED_SPORT_ID;
    /// match aquery.ET_SPORT_ORDER [2]
    property ET_SPORT_ORDER: Int64 read fET_SPORT_ORDER write fET_SPORT_ORDER;
  end;


  TSQLEVENT_TYPES_TRANSLATION = class(TSQLRecord)
  protected
    fETT_ID: Int64;
    fETT_LANG: RawUTF8;
    fET_ID: Int64;
    fET_NAME: RawUTF8;
    fET_NAME_ABB: RawUTF8;
    fET_NAME_LC: RawUTF8;
    fWEB_ID: Int64;
  published
    /// match aquery.ETT_ID [1]
    property ETT_ID: Int64 read fETT_ID write fETT_ID;
    /// match aquery.ETT_LANG [PL]
    property ETT_LANG: RawUTF8 read fETT_LANG write fETT_LANG;
    /// match aquery.ET_ID [2]
    property ET_ID: Int64 read fET_ID write fET_ID;
    /// match aquery.ET_NAME [Piłka nożna]
    property ET_NAME: RawUTF8 read fET_NAME write fET_NAME;
    /// match aquery.ET_NAME_ABB []
    property ET_NAME_ABB: RawUTF8 read fET_NAME_ABB write fET_NAME_ABB;
    /// match aquery.ET_NAME_LC []
    property ET_NAME_LC: RawUTF8 read fET_NAME_LC write fET_NAME_LC;
    /// match aquery.WEB_ID [1]
    property WEB_ID: Int64 read fWEB_ID write fWEB_ID;
  end;



  TSQLBRLIVE = class(TSQLRecord)
  protected
    // warning: aquery.ID [-195377] column matches TSQLRecord.ID
//    fID: Int64;
    fLG_ID: Int64;
    fBRMATCHID: Int64;
    fBRMACHDATE: TDateTime;
    fBRSPORTID: Int64;
    fBRSPORTNAME: RawUTF8;
    fBRACTUALDATE: TDateTime;
    fBRTEAM1: Int64;
    fBRTEAM1NAME: RawUTF8;
    fBRTEAM2: Int64;
    fBRTEAM2NAME: RawUTF8;
    fTEAM1: Int64;
    fTEAM1NAME: RawUTF8;
    fTEAM2: Int64;
    fTEAM2NAME: RawUTF8;
    fBRCURPERIODSTART: TDateTime;
    fBRWINNER: Int64;
    fBRSTATUS: Int64;
    fBRLASTGOALTEAM: Int64;
    fBRLASTGOALTIME: TDateTime;
    fBRSCORECURH: Int64;
    fBRSCORECURA: Int64;
    fBRSCORENORMH: Int64;
    fBRSCORENORMA: Int64;
    fBRSCOREP1H: Int64;
    fBRSCOREP1A: Int64;
    fBRSCOREP2H: Int64;
    fBRSCOREP2A: Int64;
    fBRSCOREP3H: Int64;
    fBRSCOREP3A: Int64;
    fBRSCOREP4H: Int64;
    fBRSCOREP4A: Int64;
    fBRSCOREP5H: Int64;
    fBRSCOREP5A: Int64;
    fBRSCOREP6H: Int64;
    fBRSCOREP6A: Int64;
    fBRCARDREDH: Int64;
    fBRCARDREDA: Int64;
    fBRCARDYELLOWH: Int64;
    fBRCARDYELLOWA: Int64;
   // fBRCNCGOALS: RawUTF8;
   // fBRCNCREDCARDS: RawUTF8;
   // fBRCNCYELLOWCARDS: RawUTF8;
    fBRCORNERSH: Int64;
    fBRCORNERSA: Int64;
    fBRFREEKICKSH: Int64;
    fBRFREEKICKSA: Int64;
    fBRPENALTIESH: Int64;
    fBRPENALTIESA: Int64;
   // fBRCNCPENALTIES: RawUTF8;
    fBRSHONTARGETH: Int64;
    fBRSHONTARGETA: Int64;
  //  fBRCNCROOTID: RawUTF8;
    fMATCH_ID: Int64;
    fIGNORE_BR: Int64;
    fMANUAL_ENTERED: Int64;
    fBRCATEGORYID: Int64;
    fBRCATEGORYNAME: RawUTF8;
    fBRTOURNAMENTID: Int64;
    fBRTOURNAMENTNAME: RawUTF8;
    fBRPROCESSED: Int64;
    fBRLRMATCHID: Int64;
    fBRLIVESTR: RawUTF8;
    fLB_SCORE: RawUTF8;
    fLB_SCORES: RawUTF8;
    fLB_TIME: RawUTF8;
    fLB_STATUS: RawUTF8;
  public
    class procedure InitializeTable(const Server: IRestOrmServer; const FieldName: RawUTF8;
      Options: TSQLInitializeTableOptions); override;

  published
    /// note: ignoring aquery.ID matching TSQLRecord.ID
    /// match aquery.LG_ID []
    property LG_ID: Int64 read fLG_ID write fLG_ID;
    /// match aquery.BRMATCHID []
    property BRMATCHID: Int64 read fBRMATCHID write fBRMATCHID;
    /// match aquery.BRMACHDATE [2014-08-13T20:30:00]
    property BRMACHDATE: TDateTime read fBRMACHDATE write fBRMACHDATE;
    /// match aquery.BRSPORTID [0]
    property BRSPORTID: Int64 read fBRSPORTID write fBRSPORTID;
    /// match aquery.BRSPORTNAME [HOCKEY]
    property BRSPORTNAME: RawUTF8 read fBRSPORTNAME write fBRSPORTNAME;
    /// match aquery.BRACTUALDATE []
    property BRACTUALDATE: TDateTime read fBRACTUALDATE write fBRACTUALDATE;
    /// match aquery.BRTEAM1 []
    property BRTEAM1: Int64 read fBRTEAM1 write fBRTEAM1;
    /// match aquery.BRTEAM1NAME []
    property BRTEAM1NAME: RawUTF8 read fBRTEAM1NAME write fBRTEAM1NAME;
    /// match aquery.BRTEAM2 []
    property BRTEAM2: Int64 read fBRTEAM2 write fBRTEAM2;
    /// match aquery.BRTEAM2NAME []
    property BRTEAM2NAME: RawUTF8 read fBRTEAM2NAME write fBRTEAM2NAME;
    /// match aquery.TEAM1 [10577]
    property TEAM1: Int64 read fTEAM1 write fTEAM1;
    /// match aquery.TEAM1NAME [Lausanne Hc]
    property TEAM1NAME: RawUTF8 read fTEAM1NAME write fTEAM1NAME;
    /// match aquery.TEAM2 [10461]
    property TEAM2: Int64 read fTEAM2 write fTEAM2;
    /// match aquery.TEAM2NAME [Hc Fribourg Gotteron]
    property TEAM2NAME: RawUTF8 read fTEAM2NAME write fTEAM2NAME;
    /// match aquery.BRCURPERIODSTART []
    property BRCURPERIODSTART: TDateTime read fBRCURPERIODSTART write fBRCURPERIODSTART;
    /// match aquery.BRWINNER []
    property BRWINNER: Int64 read fBRWINNER write fBRWINNER;
    /// match aquery.BRSTATUS []
    property BRSTATUS: Int64 read fBRSTATUS write fBRSTATUS;
    /// match aquery.BRLASTGOALTEAM []
    property BRLASTGOALTEAM: Int64 read fBRLASTGOALTEAM write fBRLASTGOALTEAM;
    /// match aquery.BRLASTGOALTIME []
    property BRLASTGOALTIME: TDateTime read fBRLASTGOALTIME write fBRLASTGOALTIME;
    /// match aquery.BRSCORECURH [3]
    property BRSCORECURH: Int64 read fBRSCORECURH write fBRSCORECURH;
    /// match aquery.BRSCORECURA [5]
    property BRSCORECURA: Int64 read fBRSCORECURA write fBRSCORECURA;
    /// match aquery.BRSCORENORMH [3]
    property BRSCORENORMH: Int64 read fBRSCORENORMH write fBRSCORENORMH;
    /// match aquery.BRSCORENORMA [5]
    property BRSCORENORMA: Int64 read fBRSCORENORMA write fBRSCORENORMA;
    /// match aquery.BRSCOREP1H [2]
    property BRSCOREP1H: Int64 read fBRSCOREP1H write fBRSCOREP1H;
    /// match aquery.BRSCOREP1A [1]
    property BRSCOREP1A: Int64 read fBRSCOREP1A write fBRSCOREP1A;
    /// match aquery.BRSCOREP2H [0]
    property BRSCOREP2H: Int64 read fBRSCOREP2H write fBRSCOREP2H;
    /// match aquery.BRSCOREP2A [4]
    property BRSCOREP2A: Int64 read fBRSCOREP2A write fBRSCOREP2A;
    /// match aquery.BRSCOREP3H [0]
    property BRSCOREP3H: Int64 read fBRSCOREP3H write fBRSCOREP3H;
    /// match aquery.BRSCOREP3A [0]
    property BRSCOREP3A: Int64 read fBRSCOREP3A write fBRSCOREP3A;
    /// match aquery.BRSCOREP4H [0]
    property BRSCOREP4H: Int64 read fBRSCOREP4H write fBRSCOREP4H;
    /// match aquery.BRSCOREP4A [0]
    property BRSCOREP4A: Int64 read fBRSCOREP4A write fBRSCOREP4A;
    /// match aquery.BRSCOREP5H [0]
    property BRSCOREP5H: Int64 read fBRSCOREP5H write fBRSCOREP5H;
    /// match aquery.BRSCOREP5A [0]
    property BRSCOREP5A: Int64 read fBRSCOREP5A write fBRSCOREP5A;
    /// match aquery.BRSCOREP6H []
    property BRSCOREP6H: Int64 read fBRSCOREP6H write fBRSCOREP6H;
    /// match aquery.BRSCOREP6A []
    property BRSCOREP6A: Int64 read fBRSCOREP6A write fBRSCOREP6A;
    /// match aquery.BRCARDREDH []
    property BRCARDREDH: Int64 read fBRCARDREDH write fBRCARDREDH;
    /// match aquery.BRCARDREDA []
    property BRCARDREDA: Int64 read fBRCARDREDA write fBRCARDREDA;
    /// match aquery.BRCARDYELLOWH []
    property BRCARDYELLOWH: Int64 read fBRCARDYELLOWH write fBRCARDYELLOWH;
    /// match aquery.BRCARDYELLOWA []
    property BRCARDYELLOWA: Int64 read fBRCARDYELLOWA write fBRCARDYELLOWA;
    /// match aquery.BRCNCGOALS []
 //   property BRCNCGOALS: RawUTF8 read fBRCNCGOALS write fBRCNCGOALS;
    /// match aquery.BRCNCREDCARDS []
//    property BRCNCREDCARDS: RawUTF8 read fBRCNCREDCARDS write fBRCNCREDCARDS;
    /// match aquery.BRCNCYELLOWCARDS []
//    property BRCNCYELLOWCARDS: RawUTF8 read fBRCNCYELLOWCARDS write fBRCNCYELLOWCARDS;
    /// match aquery.BRCORNERSH []
    property BRCORNERSH: Int64 read fBRCORNERSH write fBRCORNERSH;
    /// match aquery.BRCORNERSA []
    property BRCORNERSA: Int64 read fBRCORNERSA write fBRCORNERSA;
    /// match aquery.BRFREEKICKSH []
    property BRFREEKICKSH: Int64 read fBRFREEKICKSH write fBRFREEKICKSH;
    /// match aquery.BRFREEKICKSA []
    property BRFREEKICKSA: Int64 read fBRFREEKICKSA write fBRFREEKICKSA;
    /// match aquery.BRPENALTIESH []
    property BRPENALTIESH: Int64 read fBRPENALTIESH write fBRPENALTIESH;
    /// match aquery.BRPENALTIESA []
    property BRPENALTIESA: Int64 read fBRPENALTIESA write fBRPENALTIESA;
    /// match aquery.BRCNCPENALTIES []
//    property BRCNCPENALTIES: RawUTF8 read fBRCNCPENALTIES write fBRCNCPENALTIES;
    /// match aquery.BRSHONTARGETH []
    property BRSHONTARGETH: Int64 read fBRSHONTARGETH write fBRSHONTARGETH;
    /// match aquery.BRSHONTARGETA []
    property BRSHONTARGETA: Int64 read fBRSHONTARGETA write fBRSHONTARGETA;
    /// match aquery.BRCNCROOTID []
 //   property BRCNCROOTID: RawUTF8 read fBRCNCROOTID write fBRCNCROOTID;
    /// match aquery.MATCH_ID []
    property MATCH_ID: Int64 read fMATCH_ID write fMATCH_ID;
    /// match aquery.IGNORE_BR [1]
    property IGNORE_BR: Int64 read fIGNORE_BR write fIGNORE_BR;
    /// match aquery.MANUAL_ENTERED [0]
    property MANUAL_ENTERED: Int64 read fMANUAL_ENTERED write fMANUAL_ENTERED;
    /// match aquery.BRCATEGORYID []
    property BRCATEGORYID: Int64 read fBRCATEGORYID write fBRCATEGORYID;
    /// match aquery.BRCATEGORYNAME []
    property BRCATEGORYNAME: RawUTF8 read fBRCATEGORYNAME write fBRCATEGORYNAME;
    /// match aquery.BRTOURNAMENTID []
    property BRTOURNAMENTID: Int64 read fBRTOURNAMENTID write fBRTOURNAMENTID;
    /// match aquery.BRTOURNAMENTNAME []
    property BRTOURNAMENTNAME: RawUTF8 read fBRTOURNAMENTNAME write fBRTOURNAMENTNAME;
    /// match aquery.BRPROCESSED []
    property BRPROCESSED: Int64 read fBRPROCESSED write fBRPROCESSED;
    /// match aquery.BRLRMATCHID []
    property BRLRMATCHID: Int64 read fBRLRMATCHID write fBRLRMATCHID;
    /// match aquery.BRLIVESTR []
    property BRLIVESTR: RawUTF8 read fBRLIVESTR write fBRLIVESTR;
    /// match aquery.LB_SCORE []
    property LB_SCORE: RawUTF8 read fLB_SCORE write fLB_SCORE;
    /// match aquery.LB_SCORES []
    property LB_SCORES: RawUTF8 read fLB_SCORES write fLB_SCORES;
    /// match aquery.LB_TIME []
    property LB_TIME: RawUTF8 read fLB_TIME write fLB_TIME;
    /// match aquery.LB_STATUS []
    property LB_STATUS: RawUTF8 read fLB_STATUS write fLB_STATUS;
  end;


 TSQLWSBET_EVENTS_COMMENT = class(TSQLRecord)
  protected
    // warning: aquery.ID [3] column matches TSQLRecord.ID
//    fID: Int64;
    fEVENT_ID: Int64;
    fLANG: RawUTF8;
    fCOMMENT: RawUTF8;
  public
      class procedure InitializeTable(const Server: IRestOrmServer; const FieldName: RawUTF8;Options: TSQLInitializeTableOptions); override;
  published
    /// note: ignoring aquery.ID matching TSQLRecord.ID
    /// match aquery.EVENT_ID [2171]
    property EVENT_ID: Int64 read fEVENT_ID write fEVENT_ID;
    /// match aquery.LANG [CY]
    property LANG: RawUTF8 read fLANG write fLANG;
    /// match aquery.COMMENT [Bet on this event]
    property COMMENT: RawUTF8 read fCOMMENT write fCOMMENT;
  end;

 // TCurrentLiveEventsClass = class(TCurrentLiveEvents);
/// an easy way to create a database model for client and server

// todo: brlive, bet_games, bet_forecasts, get sql from export retail?


  TSQLGAMES_TRANSLATION = class(TSQLRecord)
  protected
    fGTT_ID: Int64;
    fGTT_LANG: RawUTF8;
    fGAME_ID: Int64;
    fGAME_NAME: RawUTF8;
    fGAME_NAME_ABB: RawUTF8;
    fGAME_NAME_LC: RawUTF8;
    fGAME_MAP_ID: Int64;
    fGAME_MAP_CODE: RawUTF8;
  public
      class procedure InitializeTable(const Server: IRestOrmServer; const FieldName: RawUTF8;Options: TSQLInitializeTableOptions); override;
  published
    /// match aquery.GTT_ID [1]
    property GTT_ID: Int64 read fGTT_ID write fGTT_ID;
    /// match aquery.GTT_LANG [CY]
    property GTT_LANG: RawUTF8 read fGTT_LANG write fGTT_LANG;
    /// match aquery.GAME_ID [960]
    property GAME_ID: Int64 read fGAME_ID write fGAME_ID;
    /// match aquery.GAME_NAME [To Score/Not to Score]
    property GAME_NAME: RawUTF8 read fGAME_NAME write fGAME_NAME;
    /// match aquery.GAME_NAME_ABB []
    property GAME_NAME_ABB: RawUTF8 read fGAME_NAME_ABB write fGAME_NAME_ABB;
    /// match aquery.GAME_NAME_LC []
    property GAME_NAME_LC: RawUTF8 read fGAME_NAME_LC write fGAME_NAME_LC;
    /// match aquery.GAME_MAP_ID []
    property GAME_MAP_ID: Int64 read fGAME_MAP_ID write fGAME_MAP_ID;
    /// match aquery.GAME_MAP_CODE []
    property GAME_MAP_CODE: RawUTF8 read fGAME_MAP_CODE write fGAME_MAP_CODE;
  end;


 TSQLFORECAST_CODES_TRANSLATION = class(TSQLRecord)
  protected
    fFCT_ID: Int64;
    fFCT_LANG: RawUTF8;
    fFC_GAME_ID: Int64;
    fFORECAST_CD: Int64;
    fFC_NAME: RawUTF8;
    fFC_NAME_ABB: RawUTF8;
    fFC_NAME_LC: RawUTF8;
    fFC_MAP_ID: Int64;
    fFC_MAP_CODE: RawUTF8;
  public
      class procedure InitializeTable(const Server: IRestOrmServer; const FieldName: RawUTF8;Options: TSQLInitializeTableOptions); override;
  published
    /// match aquery.FCT_ID [5072]
    property FCT_ID: Int64 read fFCT_ID write fFCT_ID;
    /// match aquery.FCT_LANG [CY]
    property FCT_LANG: RawUTF8 read fFCT_LANG write fFCT_LANG;
    /// match aquery.FC_GAME_ID [736]
    property FC_GAME_ID: Int64 read fFC_GAME_ID write fFC_GAME_ID;
    /// match aquery.FORECAST_CD [3390]
    property FORECAST_CD: Int64 read fFORECAST_CD write fFORECAST_CD;
    /// match aquery.FC_NAME [Under]
    property FC_NAME: RawUTF8 read fFC_NAME write fFC_NAME;
    /// match aquery.FC_NAME_ABB []
    property FC_NAME_ABB: RawUTF8 read fFC_NAME_ABB write fFC_NAME_ABB;
    /// match aquery.FC_NAME_LC []
    property FC_NAME_LC: RawUTF8 read fFC_NAME_LC write fFC_NAME_LC;
    /// match aquery.FC_MAP_ID []
    property FC_MAP_ID: Int64 read fFC_MAP_ID write fFC_MAP_ID;
    /// match aquery.FC_MAP_CODE []
    property FC_MAP_CODE: RawUTF8 read fFC_MAP_CODE write fFC_MAP_CODE;
  end;


  TSQLGAMES = class(TSQLRecord)
  protected
    fGAME_ID: Int64;
    fGAME_CODE_LOCAL: RawUTF8;
    fSTART_FC: Int64;
    fEND_FC: Int64;
    fCALC_WIN_PROC: Int64;
    fGAME_DESCR_LOCAL: RawUTF8;
    fGAME_ORDER: Int64;
    fDISPLAY_ONCLIENT: Int64;
    fMAX_BETS: Int64;
    fGAME_ENABLED: Int64;
    fGAME_ET: Int64;
    fFC_TYPE: RawUTF8;
    fMASTER_GAME: Int64;
    fGEN_METHOD: RawUTF8;
    fROW_ID: Int64;
    fROW_UO: Int64;
    fROW_HAND: Int64;
    fROW_LAST: Int64;
    fRES_DISPLAY: Int64;
    fFORMULA_ID: Int64;
    fUSE_OVERROUND: Int64;
    fNORMALISE_CHART: Int64;
    fCW_USESCORES: Int64;
    fCW_SC1: RawUTF8;
    fCW_SC2: RawUTF8;
    fCW_NO_WIN: RawUTF8;
    fCW_LIVE_STATUS: Int64;
    fGAME_INDEX: Int64;
    fGAME_OVR_GROUP: Int64;
    fUSE_SMEQUAL_CHART: Int64;
    fBORROW_CHART_GID: Int64;
    fCALC_WIN_PROC2: Int64;
  public
   class procedure InitializeTable(const Server: IRestOrmServer; const FieldName: RawUTF8;Options: TSQLInitializeTableOptions); override;
  published
    /// match aquery.GAME_ID [-900203]
    property GAME_ID: Int64 read fGAME_ID write fGAME_ID;
    /// match aquery.GAME_CODE_LOCAL [1X2]
    property GAME_CODE_LOCAL: RawUTF8 read fGAME_CODE_LOCAL write fGAME_CODE_LOCAL;
    /// match aquery.START_FC [1]
    property START_FC: Int64 read fSTART_FC write fSTART_FC;
    /// match aquery.END_FC [6]
    property END_FC: Int64 read fEND_FC write fEND_FC;
    /// match aquery.CALC_WIN_PROC [1]
    property CALC_WIN_PROC: Int64 read fCALC_WIN_PROC write fCALC_WIN_PROC;
    /// match aquery.GAME_DESCR_LOCAL [Zdarzenie główne AKO]
    property GAME_DESCR_LOCAL: RawUTF8 read fGAME_DESCR_LOCAL write fGAME_DESCR_LOCAL;
    /// match aquery.GAME_ORDER [-900203]
    property GAME_ORDER: Int64 read fGAME_ORDER write fGAME_ORDER;
    /// match aquery.DISPLAY_ONCLIENT [0]
    property DISPLAY_ONCLIENT: Int64 read fDISPLAY_ONCLIENT write fDISPLAY_ONCLIENT;
    /// match aquery.MAX_BETS [1]
    property MAX_BETS: Int64 read fMAX_BETS write fMAX_BETS;
    /// match aquery.GAME_ENABLED [0]
    property GAME_ENABLED: Int64 read fGAME_ENABLED write fGAME_ENABLED;
    /// match aquery.GAME_ET [2]
    property GAME_ET: Int64 read fGAME_ET write fGAME_ET;
    /// match aquery.FC_TYPE [1X2+1X,12,X2]
    property FC_TYPE: RawUTF8 read fFC_TYPE write fFC_TYPE;
    /// match aquery.MASTER_GAME [-1]
    property MASTER_GAME: Int64 read fMASTER_GAME write fMASTER_GAME;
    /// match aquery.GEN_METHOD []
    property GEN_METHOD: RawUTF8 read fGEN_METHOD write fGEN_METHOD;
    /// match aquery.ROW_ID [100]
    property ROW_ID: Int64 read fROW_ID write fROW_ID;
    /// match aquery.ROW_UO [0]
    property ROW_UO: Int64 read fROW_UO write fROW_UO;
    /// match aquery.ROW_HAND [0]
    property ROW_HAND: Int64 read fROW_HAND write fROW_HAND;
    /// match aquery.ROW_LAST [1]
    property ROW_LAST: Int64 read fROW_LAST write fROW_LAST;
    /// match aquery.RES_DISPLAY []
    property RES_DISPLAY: Int64 read fRES_DISPLAY write fRES_DISPLAY;
    /// match aquery.FORMULA_ID [0]
    property FORMULA_ID: Int64 read fFORMULA_ID write fFORMULA_ID;
    /// match aquery.USE_OVERROUND [0]
    property USE_OVERROUND: Int64 read fUSE_OVERROUND write fUSE_OVERROUND;
    /// match aquery.NORMALISE_CHART [0]
    property NORMALISE_CHART: Int64 read fNORMALISE_CHART write fNORMALISE_CHART;
    /// match aquery.CW_USESCORES [0]
    property CW_USESCORES: Int64 read fCW_USESCORES write fCW_USESCORES;
    /// match aquery.CW_SC1 []
    property CW_SC1: RawUTF8 read fCW_SC1 write fCW_SC1;
    /// match aquery.CW_SC2 []
    property CW_SC2: RawUTF8 read fCW_SC2 write fCW_SC2;
    /// match aquery.CW_NO_WIN [REFUND]
    property CW_NO_WIN: RawUTF8 read fCW_NO_WIN write fCW_NO_WIN;
    /// match aquery.CW_LIVE_STATUS [100]
    property CW_LIVE_STATUS: Int64 read fCW_LIVE_STATUS write fCW_LIVE_STATUS;
    /// match aquery.GAME_INDEX [0]
    property GAME_INDEX: Int64 read fGAME_INDEX write fGAME_INDEX;
    /// match aquery.GAME_OVR_GROUP [0]
    property GAME_OVR_GROUP: Int64 read fGAME_OVR_GROUP write fGAME_OVR_GROUP;
    /// match aquery.USE_SMEQUAL_CHART [0]
    property USE_SMEQUAL_CHART: Int64 read fUSE_SMEQUAL_CHART write fUSE_SMEQUAL_CHART;
    /// match aquery.BORROW_CHART_GID [0]
    property BORROW_CHART_GID: Int64 read fBORROW_CHART_GID write fBORROW_CHART_GID;
    /// match aquery.CALC_WIN_PROC2 [0]
    property CALC_WIN_PROC2: Int64 read fCALC_WIN_PROC2 write fCALC_WIN_PROC2;
  end;



  TSQLTRANSL = class(TSQLRecord)
  protected
    fTRN_ID: Int64;
    fTRN_TYPE: RawUTF8;
    fTRN_LANG: RawUTF8;
    fTRN_TRANSLATED: RawUTF8;
    fTRNO_ID: Int64;
  published
    /// match TRANSL.TRN_ID [INTEGER] *
    property TRN_ID: Int64 read fTRN_ID write fTRN_ID;
    /// match TRANSL.TRN_TYPE [VARCHAR 15 0 0]
    property TRN_TYPE: RawUTF8 index 15 read fTRN_TYPE write fTRN_TYPE;
    /// match TRANSL.TRN_LANG [VARCHAR 10 0 0]
    property TRN_LANG: RawUTF8 index 10 read fTRN_LANG write fTRN_LANG;
    /// match TRANSL.TRN_TRANSLATED [VARCHAR 1000 0 0]
    property TRN_TRANSLATED: RawUTF8 index 1000 read fTRN_TRANSLATED write fTRN_TRANSLATED;
    /// match TRANSL.TRNO_ID [INTEGER] *
    property TRNO_ID: Int64 read fTRNO_ID write fTRNO_ID;
  end;


  TSQLTRANSL_ORIGIN = class(TSQLRecord)
  protected
    fTRNO_ID: Int64;
    fTRNO_TYPE: RawUTF8;
    fTRNO_TEXT: RawUTF8;
    fTRNO_ACTIVE: Int64;
  published
    /// match TRANSL_ORIGIN.TRNO_ID [INTEGER] *
    property TRNO_ID: Int64 read fTRNO_ID write fTRNO_ID;
    /// match TRANSL_ORIGIN.TRNO_TYPE [VARCHAR 15 0 0]
    property TRNO_TYPE: RawUTF8 index 15 read fTRNO_TYPE write fTRNO_TYPE;
    /// match TRANSL_ORIGIN.TRNO_TEXT [VARCHAR 100 0 0]
    property TRNO_TEXT: RawUTF8 index 100 read fTRNO_TEXT write fTRNO_TEXT;
    /// match TRANSL_ORIGIN.TRNO_ACTIVE [SMALLINT]
    property TRNO_ACTIVE: Int64 read fTRNO_ACTIVE write fTRNO_ACTIVE;
  end;



type
 TProposedmatchRec=record
   event_id:Int64;
   game_id:Int64;
   forecast_cd:Int64;
   bf_id:Int64;
   odds:Real;
   fc_Param:Real;
 end;

var
  CurrentOutrightGames:Array of Integer;
  ProposedCouponEvents:Array of TProposedmatchRec;

function CreateBetDataModel: TSQLModel;


implementation

function CreateBetDataModel: TSQLModel;
begin
  result := TSQLModel.Create([TSQLSampleRecord,TEventTypesRecord,TDraw,TCurrentLiveEvents,
    TSQLSchemalessData,{TSQLRecordHistory,TSQLRecordTableDeleted,}
    TSQLBET_EVENTS , TSQLBET_GAMES, TSQLTEAMS_TRANSLATION , TSQLTournaments_Translation ,TSQLWSBET_EVENTS,
     TSQLEVENT_TYPES, TSQLEVENT_TYPES_TRANSLATION,
     TSQLBET_FORECASTS,TSQLBRLIVE,TSQLWSBET_EVENTS_COMMENT,
     TSQLGAMES_TRANSLATION,TSQLFORECAST_CODES_TRANSLATION,TSQLGAMES,
     TSQLTRANSL, TSQLTRANSL_ORIGIN
    ]);                    // 22 tables, does not include TSQLTEAMS
end;



{ TSQLBET_EVENTS }

constructor TSQLBET_EVENTS.Create;
begin
  inherited;
  //loadBetGames(fdet_Bet_games);
end;

function TSQLBET_EVENTS.getBetGames: TSQLBET_GAMES;
begin
   // Result:= fdet_Bet_games;
    //fdet_Bet_games.

end;

function TSQLBET_EVENTS.getVDBetGames: Variant;
begin
  //Result:= fdet_Bet_games.GetJSONValues(true,true,soSelect);
end;

class procedure TSQLBET_EVENTS.InitializeTable(const Server: IRestOrmServer;
  const FieldName: RawUTF8; Options: TSQLInitializeTableOptions);
begin
  inherited;
  if (FieldName='') or (FieldName='event_id') then
    Server.CreateSQLIndex(TSQLBET_EVENTS,'event_id',false);
  if (FieldName='') or (FieldName='actual_date') then
    Server.CreateSQLIndex(TSQLBET_EVENTS,'actual_date',false);
  if (FieldName='') or (FieldName='live_id') then
    Server.CreateSQLIndex(TSQLBET_EVENTS,'live_id',false);

end;

procedure TSQLBET_EVENTS.loadBetGames(adet_bet_games: TSQLBET_GAMES);
var
 aRes:RawUTF8;
begin
 {   fdet_Bet_games:= TSQLBET_GAMES.Create;
    fdet_Bet_games.fEVENT_ID := fEVENT_ID;
    fdet_Bet_games.fSTATUS := 100;

    fBetGamesData :=  fdet_Bet_games.GetJSONValues(true,true,soSelect) ;}
end;

procedure TSQLBET_EVENTS.setBetGames(aBetGames: TSQLBET_GAMES);
begin
  //fdet_Bet_games := aBetGames;
end;

{ TSQLWSBET_EVENTS }

class procedure TSQLWSBET_EVENTS.InitializeTable(const Server: IRestOrmServer;
  const FieldName: RawUTF8; Options: TSQLInitializeTableOptions);
begin
  inherited;
  if (FieldName='') or (FieldName='event_id') then
    Server.CreateSQLIndex(TSQLWSBET_EVENTS,'event_id',false);
end;

{ TSQLTEAMS_TRANSLATION }

class procedure TSQLTEAMS_TRANSLATION.InitializeTable(const Server: IRestOrmServer;
  const FieldName: RawUTF8; Options: TSQLInitializeTableOptions);
begin
  inherited;
  if (FieldName='') or (FieldName='team_id') then
    Server.CreateSQLIndex(TSQLTEAMS_TRANSLATION,'team_id',false);

end;

{ TSQLTournaments_Translation }

class procedure TSQLTournaments_Translation.InitializeTable(
  const Server: IRestOrmServer; const FieldName: RawUTF8;
  Options: TSQLInitializeTableOptions);
begin
  inherited;
  if (FieldName='') or (FieldName='tid') then
    Server.CreateSQLIndex(TSQLTournaments_Translation,'tid',false);

end;

{ TSQLBRLIVE }

class procedure TSQLBRLIVE.InitializeTable(const Server: IRestOrmServer;
  const FieldName: RawUTF8; Options: TSQLInitializeTableOptions);
begin
  inherited;
  if (FieldName='') or (FieldName='id') then
    Server.CreateSQLIndex(TSQLBRLIVE,'id',false);
end;

{ TSQLBET_GAMES }

class procedure TSQLBET_GAMES.InitializeTable(const Server: IRestOrmServer;
  const FieldName: RawUTF8; Options: TSQLInitializeTableOptions);
begin
  inherited;
  if (FieldName='') or (FieldName='event_id') then
    Server.CreateSQLIndex(TSQLBET_GAMES,'event_id',false);

end;

{ TSQLBET_FORECASTS }

class procedure TSQLBET_FORECASTS.InitializeTable(const Server: IRestOrmServer;
  const FieldName: RawUTF8; Options: TOrmInitializeTableOptions);
begin
  inherited;
  if (FieldName='') or (FieldName='event_id') then
    Server.CreateSQLIndex(TSQLBET_FORECASTS,'event_id',false);
end;

{ TSQLGAMES_TRANSLATION }

class procedure TSQLGAMES_TRANSLATION.InitializeTable(const Server: IRestOrmServer;
  const FieldName: RawUTF8; Options: TSQLInitializeTableOptions);
begin
  inherited;
  if (FieldName='') or (FieldName='game_id') then
    Server.CreateSQLIndex(TSQLGAMES_TRANSLATION ,'game_id',false);
end;

{ TSQLFORECAST_CODES_TRANSLATION }

class procedure TSQLFORECAST_CODES_TRANSLATION.InitializeTable(
  const Server: IRestOrmServer; const FieldName: RawUTF8;
  Options: TSQLInitializeTableOptions);
begin
  inherited;
  if (FieldName='') or (FieldName='forecast_cd') then
    Server.CreateSQLIndex(TSQLFORECAST_CODES_TRANSLATION  ,'forecast_cd',false);

end;

{ TSQGAMES }

class procedure TSQLGAMES.InitializeTable(const Server: IRestOrmServer;
  const FieldName: RawUTF8; Options: TSQLInitializeTableOptions);
begin
  inherited;
  if (FieldName='') or (FieldName='game_id') then
    Server.CreateSQLIndex(TSQLGAMES ,'game_id',false);
  if (FieldName='') or (FieldName='row_hand') then
    Server.CreateSQLIndex(TSQLGAMES,'row_hand',false);

end;

{ TSQLWSBET_EVENTS_COMMENT }

class procedure TSQLWSBET_EVENTS_COMMENT.InitializeTable(const Server: IRestOrmServer;
  const FieldName: RawUTF8; Options: TSQLInitializeTableOptions);
begin
  inherited;
  if (FieldName='') or (FieldName='event_id') then
    Server.CreateSQLIndex(TSQLWSBET_EVENTS_COMMENT,'event_id',false);
end;

end.
